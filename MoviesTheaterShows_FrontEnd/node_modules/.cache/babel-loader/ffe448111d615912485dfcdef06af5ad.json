{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"https://nir-welovemovies-backend.herokuapp.com\";\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\n\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n\n    return Promise.resolve(onCancel);\n  }\n}\n\nfunction populateReviews(signal) {\n  return async movie => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/reviews`;\n    movie.reviews = await fetchJson(url, {\n      headers,\n      signal\n    }, []);\n    return movie;\n  };\n}\n\nfunction populateTheaters(signal) {\n  return async movie => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/theaters`;\n    movie.theaters = await fetchJson(url, {\n      headers,\n      signal\n    }, []);\n    return movie;\n  };\n}\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\n\n\nexport async function listMovies(signal) {\n  const url = new URL(`${API_BASE_URL}/movies?is_showing=true`);\n  const addReviews = populateReviews(signal);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []).then(movies => Promise.all(movies.map(addReviews)));\n}\n/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */\n\nexport async function listTheaters(signal) {\n  const url = new URL(`${API_BASE_URL}/theaters`);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []);\n}\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\n\nexport async function readMovie(movieId, signal) {\n  const url = new URL(`${API_BASE_URL}/movies/${movieId}`);\n  const addReviews = populateReviews(signal);\n  const addTheaters = populateTheaters(signal);\n  return await fetchJson(url, {\n    headers,\n    signal\n  }, []).then(addReviews).then(addTheaters);\n}\nexport async function deleteReview(reviewId) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  return await fetchJson(url, {\n    method: \"DELETE\",\n    headers\n  }, {});\n}\nexport async function updateReview(reviewId, data) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data\n    })\n  };\n  return await fetchJson(url, options, {});\n}","map":{"version":3,"sources":["/Users/jeenir/Desktop/Learn/WebDevelopment/ThinkFul/Assignment-WeLoveMovies/MoviesTheaterShows/MoviesTheaterShows_FrontEnd/src/utils/api.js"],"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","populateReviews","signal","movie","movie_id","reviews","populateTheaters","theaters","listMovies","URL","addReviews","then","movies","all","map","listTheaters","readMovie","movieId","addTheaters","deleteReview","reviewId","method","updateReview","body","JSON","stringify"],"mappings":"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","sourcesContent":["const API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"https://nir-welovemovies-backend.herokuapp.com\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\nfunction populateReviews(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/reviews`;\n    movie.reviews = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\nfunction populateTheaters(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/theaters`;\n    movie.theaters = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function listMovies(signal) {\n  const url = new URL(`${API_BASE_URL}/movies?is_showing=true`);\n  const addReviews = populateReviews(signal);\n  return await fetchJson(url, { headers, signal }, []).then((movies) =>\n    Promise.all(movies.map(addReviews))\n  );\n}\n\n/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */\nexport async function listTheaters(signal) {\n  const url = new URL(`${API_BASE_URL}/theaters`);\n  return await fetchJson(url, { headers, signal }, []);\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function readMovie(movieId, signal) {\n  const url = new URL(`${API_BASE_URL}/movies/${movieId}`);\n  const addReviews = populateReviews(signal);\n  const addTheaters = populateTheaters(signal);\n  return await fetchJson(url, { headers, signal }, [])\n    .then(addReviews)\n    .then(addTheaters);\n}\n\nexport async function deleteReview(reviewId) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  return await fetchJson(url, { method: \"DELETE\", headers }, {});\n}\n\nexport async function updateReview(reviewId, data) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data }),\n  };\n  return await fetchJson(url, options, {});\n}\n"]},"metadata":{},"sourceType":"module"}