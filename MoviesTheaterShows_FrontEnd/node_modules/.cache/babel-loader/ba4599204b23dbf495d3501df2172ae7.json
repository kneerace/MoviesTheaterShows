{"ast":null,"code":"import _regeneratorRuntime from\"/Users/jeenir/Desktop/Learn/WebDevelopment/ThinkFul/Assignment-WeLoveMovies/MoviesTheaterShows/MoviesTheaterShows_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/jeenir/Desktop/Learn/WebDevelopment/ThinkFul/Assignment-WeLoveMovies/MoviesTheaterShows/MoviesTheaterShows_FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var API_BASE_URL=process.env.REACT_APP_API_BASE_URL||\"https://nir-welovemovies-backend.herokuapp.com\";/**\n * Defines the default headers for these functions to work with `json-server`\n */var headers=new Headers();headers.append(\"Content-Type\",\"application/json\");/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */function fetchJson(_x,_x2,_x3){return _fetchJson.apply(this,arguments);}function _fetchJson(){_fetchJson=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url,options,onCancel){var response,payload;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return fetch(url,options);case 3:response=_context3.sent;if(!(response.status===204)){_context3.next=6;break;}return _context3.abrupt(\"return\",null);case 6:_context3.next=8;return response.json();case 8:payload=_context3.sent;if(!payload.error){_context3.next=11;break;}return _context3.abrupt(\"return\",Promise.reject({message:payload.error}));case 11:return _context3.abrupt(\"return\",payload.data);case 14:_context3.prev=14;_context3.t0=_context3[\"catch\"](0);if(!(_context3.t0.name!==\"AbortError\")){_context3.next=19;break;}console.error(_context3.t0.stack);throw _context3.t0;case 19:return _context3.abrupt(\"return\",Promise.resolve(onCancel));case 20:case\"end\":return _context3.stop();}}},_callee3,null,[[0,14]]);}));return _fetchJson.apply(this,arguments);}function populateReviews(signal){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(movie){var url;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"\".concat(API_BASE_URL,\"/movies/\").concat(movie.movie_id,\"/reviews\");_context.next=3;return fetchJson(url,{headers:headers,signal:signal},[]);case 3:movie.reviews=_context.sent;return _context.abrupt(\"return\",movie);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x4){return _ref.apply(this,arguments);};}();}function populateTheaters(signal){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url=\"\".concat(API_BASE_URL,\"/movies/\").concat(movie.movie_id,\"/theaters\");_context2.next=3;return fetchJson(url,{headers:headers,signal:signal},[]);case 3:movie.theaters=_context2.sent;return _context2.abrupt(\"return\",movie);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x5){return _ref2.apply(this,arguments);};}();}/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */export function listMovies(_x6){return _listMovies.apply(this,arguments);}/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */function _listMovies(){_listMovies=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(signal){var url,addReviews;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:url=new URL(\"\".concat(API_BASE_URL,\"/movies?is_showing=true\"));addReviews=populateReviews(signal);_context4.next=4;return fetchJson(url,{headers:headers,signal:signal},[]).then(function(movies){return Promise.all(movies.map(addReviews));});case 4:return _context4.abrupt(\"return\",_context4.sent);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return _listMovies.apply(this,arguments);}export function listTheaters(_x7){return _listTheaters.apply(this,arguments);}/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */function _listTheaters(){_listTheaters=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(signal){var url;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:url=new URL(\"\".concat(API_BASE_URL,\"/theaters\"));_context5.next=3;return fetchJson(url,{headers:headers,signal:signal},[]);case 3:return _context5.abrupt(\"return\",_context5.sent);case 4:case\"end\":return _context5.stop();}}},_callee5);}));return _listTheaters.apply(this,arguments);}export function readMovie(_x8,_x9){return _readMovie.apply(this,arguments);}function _readMovie(){_readMovie=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(movieId,signal){var url,addReviews,addTheaters;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:url=new URL(\"\".concat(API_BASE_URL,\"/movies/\").concat(movieId));addReviews=populateReviews(signal);addTheaters=populateTheaters(signal);_context6.next=5;return fetchJson(url,{headers:headers,signal:signal},[]).then(addReviews).then(addTheaters);case 5:return _context6.abrupt(\"return\",_context6.sent);case 6:case\"end\":return _context6.stop();}}},_callee6);}));return _readMovie.apply(this,arguments);}export function deleteReview(_x10){return _deleteReview.apply(this,arguments);}function _deleteReview(){_deleteReview=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(reviewId){var url;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:url=\"\".concat(API_BASE_URL,\"/reviews/\").concat(reviewId);_context7.next=3;return fetchJson(url,{method:\"DELETE\",headers:headers},{});case 3:return _context7.abrupt(\"return\",_context7.sent);case 4:case\"end\":return _context7.stop();}}},_callee7);}));return _deleteReview.apply(this,arguments);}export function updateReview(_x11,_x12){return _updateReview.apply(this,arguments);}function _updateReview(){_updateReview=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(reviewId,data){var url,options;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:url=\"\".concat(API_BASE_URL,\"/reviews/\").concat(reviewId);options={method:\"PUT\",headers:headers,body:JSON.stringify({data:data})};_context8.next=4;return fetchJson(url,options,{});case 4:return _context8.abrupt(\"return\",_context8.sent);case 5:case\"end\":return _context8.stop();}}},_callee8);}));return _updateReview.apply(this,arguments);}","map":{"version":3,"sources":["/Users/jeenir/Desktop/Learn/WebDevelopment/ThinkFul/Assignment-WeLoveMovies/MoviesTheaterShows/MoviesTheaterShows_FrontEnd/src/utils/api.js"],"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","fetch","response","status","json","payload","error","Promise","reject","message","data","name","console","stack","resolve","populateReviews","signal","movie","movie_id","reviews","populateTheaters","theaters","listMovies","URL","addReviews","then","movies","all","map","listTheaters","readMovie","movieId","addTheaters","deleteReview","reviewId","method","updateReview","body","JSON","stringify"],"mappings":"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","sourcesContent":["const API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"https://nir-welovemovies-backend.herokuapp.com\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\nfunction populateReviews(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/reviews`;\n    movie.reviews = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\nfunction populateTheaters(signal) {\n  return async (movie) => {\n    const url = `${API_BASE_URL}/movies/${movie.movie_id}/theaters`;\n    movie.theaters = await fetchJson(url, { headers, signal }, []);\n    return movie;\n  };\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function listMovies(signal) {\n  const url = new URL(`${API_BASE_URL}/movies?is_showing=true`);\n  const addReviews = populateReviews(signal);\n  return await fetchJson(url, { headers, signal }, []).then((movies) =>\n    Promise.all(movies.map(addReviews))\n  );\n}\n\n/**\n * Retrieves all existing theaters\n * @returns {Promise<[theater]>}\n *  a promise that resolves to a possibly empty array of theaters saved in the database.\n */\nexport async function listTheaters(signal) {\n  const url = new URL(`${API_BASE_URL}/theaters`);\n  return await fetchJson(url, { headers, signal }, []);\n}\n\n/**\n * Retrieves all existing movies and populates the `reviews` property\n * @returns {Promise<[movie]>}\n *  a promise that resolves to a possibly empty array of movies saved in the database.\n */\nexport async function readMovie(movieId, signal) {\n  const url = new URL(`${API_BASE_URL}/movies/${movieId}`);\n  const addReviews = populateReviews(signal);\n  const addTheaters = populateTheaters(signal);\n  return await fetchJson(url, { headers, signal }, [])\n    .then(addReviews)\n    .then(addTheaters);\n}\n\nexport async function deleteReview(reviewId) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  return await fetchJson(url, { method: \"DELETE\", headers }, {});\n}\n\nexport async function updateReview(reviewId, data) {\n  const url = `${API_BASE_URL}/reviews/${reviewId}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data }),\n  };\n  return await fetchJson(url, options, {});\n}\n"]},"metadata":{},"sourceType":"module"}